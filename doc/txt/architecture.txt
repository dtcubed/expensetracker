Client
------
Will merely build up a properly formed file consisting of one (1) or
more expense records. Then, after some unique information has been
prepended onto the front of the file, SSH will be utilized to SCP
the file to the proper place on the expense server.

Expense Tracker Command Server (ETCS)
-------------------------------------
This will be a server (threaded or forking) which implements the
ETCS protocol. Some anticipated "commands":

"request transaction code" - returns unique (enough) transaction code
  to build a directory path for further processing.

"process file" - processes file that Expense Tracker understands.

It is envisioned that any code which leads to Create (e.g. INSERT), 
Update, or Delete operations will get invoked via ETCS.

Web Application 
----------------
Eventually, there will be a web application (HTTPS) from which the
user can:
-- Conduct Read operations against the RDBMS.
-- Correct expense category information.
-- Upload files of expense records.
-- Split expenses, update expense comments and categorization.
-- Run reports, etc.

Some Architectual Pieces
------------------------
-- Dynamic DNS Script
-- ETCS (encrypted for good measure)
-- RDBMS (will probably start out with SQLite, but consider going to something like Postgres later)
-- SSH Client
-- SSH Server
-- Web Server (HTTPS)

Rough Expense Submission Protocol
---------------------------------
1 - Client issues "requests transaction code" to ETCS.
    a) Transaction code is generated. 
    b) Offset directory from $ET_BASEDIR is made. 
    c) Transaction code is returned. 

2 - Client SCPs "exp.dat" to $ET_BASEDIR/<transaction_code>><possible_heuristic_bits>/et.dat
    a) OK is returned.

3 - Client issues "process file" to the ET Command Server
    a) Returns status code

Transaction Code
----------------
-- Something like this: YYYYMMDDHHMMSS-Random()-ThreadID should work.

